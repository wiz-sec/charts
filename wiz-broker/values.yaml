# Default values for wiz-broker.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# override default application name
nameOverride: "wiz-broker"

podAnnotations: {}

rollmeAnnotation:
  enabled: true

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000

global:
  # Set the log level. Can be one of "debug", "info", "warn", or "error".
  # Warning: Do not set to `debug` in production environments, or sensitive data may be written to the logs.
  logLevel: "info"

  image:
    registry: wiziopublic.azurecr.io/wiz-app
    repository: wiz-broker
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: ""
    imagePullSecrets: [] # Secrets for container image registry keys as described in https://kubernetes.io/docs/concepts/containers/images/#referring-to-an-imagepullsecrets-on-a-pod

  broker:
    enabled: true
    # Specifies whether the broker is managed by Wiz or not.
    # Do not edit manually.
    wizManaged: false
    # Relevant only for wiz-managed brokers
    outpostId: ""
    # Specifies whether the connector/api-token secrets should be created by the chart
    createSecret: true
    targetIp: ""
    targetPort: ""
    serviceAccount:
      create: true
      # Annotations to add to the service account
      annotations: { }
      # The name of the service account to use.
      name: ""

    podCustomEnvironmentVariablesFile: ""

    customVolumes: [ ]
    customVolumeMounts: [ ]

    skipTlsVerify: false # true indicates that the proxy's certificate should not be verified. DO NOT USE IN PRODUCTION!

    caCertificate:
      enabled: false
      createSecret: true # If false, need to create the secret manually and provide its name in secretName.
      annotations: { }
      secretName: ""
      pem: "" # PEM format CA certificate to use for proxy TLS verification.

    mtls:
      enabled: false
      createSecret: true # If false, need to create the secret manually and provide its name in secretName.
      annotations: { }
      secretName: ""
      certificate: "" # PEM format client certificate to use for proxy TLS verification.
      privateKey: "" # PEM format private key to use for proxy TLS verification.

  httpProxyConfiguration:
    enabled: false

    # Specifies whether a proxy secret should be created
    # If create is false you need to:
    #  1. Create secret with httpProxy, httpsProxy and noProxyAddress.
    #  2. Set secretName to reference your secret
    create: true
    annotations: {}
    secretName: "" # Overriding default name for proxy secret name (.Release.Name + "-proxy-configuration" by default)

    httpProxy: "" # http(s)://user:password@your-proxy:port (user, password and port are optional)
    httpsProxy: "" # http(s)://user:password@your-proxy:port (user, password and port are optional)
    noProxyAddress: "" # comma or space separated list of machine or domain names

  wizApiToken:
    clientId: ""
    clientToken: ""
    clientEndpoint: "" # Set custom endpoint (gov for example)

    secret:
      # Specifies whether an api token secret should be created
      # If create is false you need to create it with clientId, clientToken
      create: true
      # Annotations to add to the secret
      annotations: {}
      # The name of the secret to use.
      # If not set, a name is generated using the fullname template
      name: ""

    # API token should be read from an environment file, which is specified in podCustomEnvironmentVariablesFile
    usePodCustomEnvironmentVariablesFile: false

  wizConnector: # Relevant only for broker.enabled = true
    # Specifies whether a connector secret should be created
    # If createSecret is false you need to:
    #  1. Create secret with this keys:
    #     CONNECTOR_ID, CONNECTOR_TOKEN, TARGET_DOMAIN, TARGET_IP, TARGET_PORT
    #  2. Set secretName to reference your secret
    createSecret: true
    # Annotations to add to the secret
    annotations: {}
    secretName: ""

    connectorId: ""
    connectorToken: ""
    targetDomain: ""
    targetPort: ""
    tunnelServerDomain: ""
    tunnelServerPort: ""
    tunnelClientAllowedDomains: []
