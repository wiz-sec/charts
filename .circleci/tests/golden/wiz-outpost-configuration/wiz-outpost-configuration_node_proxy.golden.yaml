---
# Source: wiz-outpost-configuration/templates/agent.secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: wiz-outpost-agent-creds
  labels:
    helm.sh/chart: "GOLDEN_STATIC_VALUE"
    app.kubernetes.io/name: wiz-outpost-configuration
    app.kubernetes.io/instance: release-test
    app.kubernetes.io/version: "0.0.1"
    app.kubernetes.io/managed-by: Helm
stringData:
  clientId: "client-id"
  clientSecret: "client-secret"
---
# Source: wiz-outpost-configuration/templates/httpProxyConfiguration.secret.yaml
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: wiz-http-proxy-configuration
  labels:
    helm.sh/chart: "GOLDEN_STATIC_VALUE"
    app.kubernetes.io/name: wiz-outpost-configuration
    app.kubernetes.io/instance: release-test
    app.kubernetes.io/version: "0.0.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    meta.helm.sh/release-name: "release-test"
    meta.helm.sh/release-namespace: "release-helm-namespace"
data:
  httpProxy: "aHR0cDovL2h0dHBwcm94eS5jb20="
  http-proxy: "aHR0cDovL2h0dHBwcm94eS5jb20="
  httpsProxy: "aHR0cDovL2h0dHBzcHJveHkuY29t"
  https-proxy: "aHR0cDovL2h0dHBzcHJveHkuY29t"
  no-proxy-address: "bG9jYWxob3N0IC5jbHVzdGVyLmxvY2Fs"
  no-proxy-address-cs: "bG9jYWxob3N0LC5jbHVzdGVyLmxvY2Fs"
  noProxyAddress: "bG9jYWxob3N0LC5jbHVzdGVyLmxvY2Fs"
  noProxyAddressSpaceSepareted: "bG9jYWxob3N0IC5jbHVzdGVyLmxvY2Fs"
  caCertificate: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUdjakNDQkZxZ0F3SUJBZ0lRRHh4cE1PMzlnWjd1NCtOTmlGMGUvekFOQmdrcWhraUc5dzBCQVFzRkFEQ0IKSTVzQ0QyRGZid1BKWFF5c2N0TTVTZjZyK3JTYjlRPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
---
# Source: wiz-outpost-configuration/templates/nodeHttpProxyConfiguration.gcp.ubuntu.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: wiz-http-proxy-configuration-entrypoint
  labels:
    helm.sh/chart: "GOLDEN_STATIC_VALUE"
    app.kubernetes.io/name: wiz-outpost-configuration
    app.kubernetes.io/instance: release-test
    app.kubernetes.io/version: "0.0.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    meta.helm.sh/release-name: "release-test"
    meta.helm.sh/release-namespace: "release-helm-namespace"
data:
  entrypoint.sh: |
    #!/usr/bin/env bash

    set -euo pipefail -x

    ROOT_MOUNT_DIR="${ROOT_MOUNT_DIR:-/root}"
    if chroot "${ROOT_MOUNT_DIR}" test -f /var/run/http-proxy-configured; then
      echo "Proxy already configured, skipping"
      exit 0
    fi
    chroot "${ROOT_MOUNT_DIR}" tee<<EOF /var/run/http-proxy-configured
    v1.0 $(date)
    EOF

    # Create the containerd and sandbox-image systemd directory
    chroot "${ROOT_MOUNT_DIR}" mkdir -p /lib/systemd/system/containerd.service.d

    # Set the proxy for future processes, and use as an include file
    chroot "${ROOT_MOUNT_DIR}" tee -a <<EOF /etc/environment
    http_proxy="http://httpproxy.com"
    HTTP_PROXY="http://httpproxy.com"
    https_proxy="http://httpsproxy.com"
    HTTPS_PROXY="http://httpsproxy.com"
    no_proxy="localhost,.cluster.local"
    NO_PROXY="localhost,.cluster.local"
    EOF

    # Configure Containerd with the proxy
    chroot "${ROOT_MOUNT_DIR}" tee <<EOF /lib/systemd/system/containerd.service.d/http-proxy.conf >/dev/null
    [Service]    
    EnvironmentFile=/etc/environment
    EOF
    chroot "${ROOT_MOUNT_DIR}" mkdir -p /usr/local/share/ca-certificates/extra
    chroot "${ROOT_MOUNT_DIR}" tee <<EOF /usr/local/share/ca-certificates/extra/root.cert.crt
    -----BEGIN CERTIFICATE-----
    MIIGcjCCBFqgAwIBAgIQDxxpMO39gZ7u4+NNiF0e/zANBgkqhkiG9w0BAQsFADCB
    I5sCD2DfbwPJXQysctM5Sf6r+rSb9Q==
    -----END CERTIFICATE-----
    EOF
    chroot "${ROOT_MOUNT_DIR}" update-ca-certificates

    # Log the proxy settings to confirm
    chroot "${ROOT_MOUNT_DIR}" tee <<EOF /var/log/startup-script.log
    Proxy settings applied
    EOF

    # Restart containerd to apply the new proxy settings
    chroot "${ROOT_MOUNT_DIR}" systemctl daemon-reload
    chroot "${ROOT_MOUNT_DIR}" systemctl restart containerd
---
# Source: wiz-outpost-configuration/templates/nodeHttpProxyConfiguration.gcp.ubuntu.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: node-initializer
  labels:
    app: default-init
spec:
  selector:
    matchLabels:
      app: default-init
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        name: node-initializer
        app: default-init
    spec:
      hostPID: true
      volumes:
        - name: root-mount
          hostPath:
            path: /
        - name: entrypoint
          configMap:
            name: wiz-http-proxy-configuration-entrypoint
            defaultMode: 0744
      initContainers:
        - image: "marketplace.gcr.io/google/ubuntu2204"
          name: node-initializer
          command: ["/scripts/entrypoint.sh"]
          env:
            - name: ROOT_MOUNT_DIR
              value: /root
          securityContext:
            privileged: true
          volumeMounts:
            - name: root-mount
              mountPath: /root
            - name: entrypoint
              mountPath: /scripts
      containers:
        - image: "gcr.io/google-containers/pause:2.0"
          name: pause
