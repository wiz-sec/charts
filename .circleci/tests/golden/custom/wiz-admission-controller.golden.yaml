---
# Source: wiz-admission-controller/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-test-wiz-admission-controller
  namespace: "release-helm-namespace"
  labels:
    app.kubernetes.io/chartName: wiz-admission-controller
    app.kubernetes.io/instance: release-test
    app.kubernetes.io/version: "2.7"
    app.kubernetes.io/managed-by: Helm
---
# Source: wiz-admission-controller/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-test-wiz-admission-controller-manager
  namespace: "release-helm-namespace"
  labels:
    app.kubernetes.io/chartName: wiz-admission-controller
    app.kubernetes.io/instance: release-test
    app.kubernetes.io/version: "2.7"
    app.kubernetes.io/managed-by: Helm
---
# Source: wiz-admission-controller/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-test-api-token
  namespace: "release-helm-namespace"
  labels:
    app.kubernetes.io/chartName: wiz-admission-controller
    app.kubernetes.io/instance: release-test
    app.kubernetes.io/version: "2.7"
    app.kubernetes.io/managed-by: Helm
stringData:
  clientId: "<insert-client-id>"
  clientToken: "<insert-client-token>"
---
# Source: wiz-admission-controller/templates/serviceaccount.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: release-test-wiz-admission-controller-namespace-reader
  namespace: "release-helm-namespace"
  labels:
    app.kubernetes.io/chartName: wiz-admission-controller
    app.kubernetes.io/instance: release-test
    app.kubernetes.io/version: "2.7"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list"]
---
# Source: wiz-admission-controller/templates/serviceaccount.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: release-test-wiz-admission-controller-manager-event-creator
  namespace: "release-helm-namespace"
  labels:
    app.kubernetes.io/chartName: wiz-admission-controller
    app.kubernetes.io/instance: release-test
    app.kubernetes.io/version: "2.7"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create"]
---
# Source: wiz-admission-controller/templates/serviceaccount.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: release-test-wiz-admission-controller-namespace
  namespace: "release-helm-namespace"
  labels:
    app.kubernetes.io/chartName: wiz-admission-controller
    app.kubernetes.io/instance: release-test
    app.kubernetes.io/version: "2.7"
    app.kubernetes.io/managed-by: Helm
subjects:
- kind: ServiceAccount
  name: release-test-wiz-admission-controller
  namespace: "release-helm-namespace"
roleRef:
  kind: ClusterRole
  name: release-test-wiz-admission-controller-namespace-reader
  apiGroup: rbac.authorization.k8s.io
---
# Source: wiz-admission-controller/templates/serviceaccount.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: release-test-wiz-admission-controller-manager-event-creator
  namespace: "release-helm-namespace"
  labels:
    app.kubernetes.io/chartName: wiz-admission-controller
    app.kubernetes.io/instance: release-test
    app.kubernetes.io/version: "2.7"
    app.kubernetes.io/managed-by: Helm
roleRef:
  kind: ClusterRole
  name: release-test-wiz-admission-controller-manager-event-creator
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: release-test-wiz-admission-controller-manager
    namespace: "release-helm-namespace"
---
# Source: wiz-admission-controller/templates/serviceaccount.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-test-wiz-admission-controller-manager-pods-and-deployments-manager
  namespace: "release-helm-namespace"
  labels:
    app.kubernetes.io/chartName: wiz-admission-controller
    app.kubernetes.io/instance: release-test
    app.kubernetes.io/version: "2.7"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: ["apps"]
    resources: ["deployments"]
    resourceNames: ["release-test-wiz-admission-controller"]
    verbs: ["get", "patch"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list"]
---
# Source: wiz-admission-controller/templates/serviceaccount.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-test-wiz-admission-controller-manager-pods-and-deployments
  namespace: "release-helm-namespace"
  labels:
    app.kubernetes.io/chartName: wiz-admission-controller
    app.kubernetes.io/instance: release-test
    app.kubernetes.io/version: "2.7"
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: release-test-wiz-admission-controller-manager
    namespace: "release-helm-namespace"
roleRef:
  kind: Role
  name: release-test-wiz-admission-controller-manager-pods-and-deployments-manager
  apiGroup: rbac.authorization.k8s.io
---
# Source: wiz-admission-controller/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-test-wiz-admission-controller
  namespace: "release-helm-namespace"
  labels:
    app.kubernetes.io/chartName: wiz-admission-controller
    app.kubernetes.io/instance: release-test
    app.kubernetes.io/version: "2.7"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: wiz-admission-controller
spec:
  type: ClusterIP
  ports:
    - port: 443
      targetPort: 10250
      protocol: TCP
  selector:
    app.kubernetes.io/chartName: wiz-admission-controller
    app.kubernetes.io/instance: release-test
    app.kubernetes.io/name: wiz-admission-controller
---
# Source: wiz-admission-controller/templates/deploymentenforcement.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-test-wiz-admission-controller
  namespace: "release-helm-namespace"
  labels:
    app.kubernetes.io/chartName: wiz-admission-controller
    app.kubernetes.io/instance: release-test
    app.kubernetes.io/version: "2.7"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: wiz-admission-controller
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/chartName: wiz-admission-controller
      app.kubernetes.io/instance: release-test
      app.kubernetes.io/name: wiz-admission-controller
  template:
    metadata:
      annotations:
        rollme.proxyHash: 19514bab71d978154200cb24acbc4334cc95e5470ccab6e9216c99152171633a
        rollme.wizApiTokenHash: be7f348cb8721e285ea80fa05ef524362ac46a57b0539e78b390db2bb0acb1be
        rollme.webhookCert: ae7a874439be7c507db6c574faf4217bd682e1527cc8a003ce58543196ce3ac3
      labels:
        app.kubernetes.io/chartName: wiz-admission-controller
        app.kubernetes.io/instance: release-test
        app.kubernetes.io/version: "2.7"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: wiz-admission-controller
    spec:
      serviceAccountName: release-test-wiz-admission-controller
      securityContext:
        {}
      terminationGracePeriodSeconds: 60
      containers:
        - name: wiz-admission-controller
          securityContext:
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
          image: wiziopublic.azurecr.io/wiz-app/wiz-admission-controller:2.7
          imagePullPolicy: Always
          ports:
          - containerPort: 10250
          readinessProbe:
            httpGet:
              path: /ready
              port: 8000
              scheme: HTTPS
            failureThreshold: 1
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 30
          livenessProbe:
            httpGet:
              path: /live
              port: 8000
              scheme: HTTPS
            failureThreshold: 3
            initialDelaySeconds: 5
            timeoutSeconds: 30
          startupProbe:
            httpGet:
              path: /ready
              port: 8000
              scheme: HTTPS
            failureThreshold: 30
            initialDelaySeconds: 5
            timeoutSeconds: 300

          command:
          - "/usr/bin/wiz-admission-controller"
          # Cluster identification flags
          # Server flags
          - "--port=10250"
          - "--tls-private-key-file=/var/server-certs/tls.key"
          - "--tls-cert-file=/var/server-certs/tls.crt"
          - "--readiness-port=8000"
          # Kubernetes API server flags
          - "--namespace-cache-ttl=10m"
          # Webhook flags # check opaWebhook for backward compatibility
          - "--error-enforcement-method=AUDIT"
          # OPA webhook flags
          - "--misconfiguration-enabled=true"
          
          # Image integrity webhook flags# Disable K8S audit logs webhook
          - "--kubernetes-audit-logs-enabled=false"
          env:
          - name: WIZ_CLIENT_ID
            valueFrom:
              secretKeyRef:
                name: release-test-api-token
                key: clientId
                optional: false
          - name: WIZ_CLIENT_TOKEN
            valueFrom:
              secretKeyRef:
                name: release-test-api-token
                key: clientToken
                optional: false
          - name: WIZ_ENV
            value: 
          - name: LOG_LEVEL
            value: info
          - name: WIZ_RUNTIME_METADATA_POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: WIZ_RUNTIME_METADATA_NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: K8S_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: WIZ_TERMINATION_GRACE_PERIOD
            value: "60s"
          - name: WIZ_IMAGE_INTEGRITY_PATCH_IMAGE_DIGEST_ANNOTATION
            value: "true"
           # For running pod with read only file system we write all the cache files to /var/cache volume mount, used by image integrity hook
          - name: TUF_ROOT
            value: "/var/cache/.sigstore"
          - name: AWS_ECR_CACHE_DIR
            value: "/var/cache/.ecr"
           ## Image registry client flags
          - name: WIZ_REGISTRY_IGNORE_SECRET_MISSING_ERROR
            value: "false"
          - name: WIZ_REGISTRY_IMAGE_PULL_SECRET_RELOAD_INTERVAL
            value: "5m"
          ## Enable debug webhook that only logs the request
          resources:
            {}
          volumeMounts:
          - mountPath: /var/cache
            name: cache
          - mountPath: /var/server-certs
            name: server-certs
            readOnly: true
      volumes:
        - name: cache
          emptyDir: {}
        - name: server-certs
          secret:
            defaultMode: 444
            secretName: release-test-wiz-admission-controller-cert
---
# Source: wiz-admission-controller/templates/cronjobmanager.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: release-test-wiz-admission-controller-manager
  namespace: "release-helm-namespace"
  labels:
    app.kubernetes.io/chartName: wiz-admission-controller
    app.kubernetes.io/instance: release-test
    app.kubernetes.io/version: "2.7"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: release-test-wiz-admission-controller-manager
spec:
  schedule: "0 * * * *"
  concurrencyPolicy: Forbid  # Ensures only one job instance runs at a time
  jobTemplate:
    spec:
      activeDeadlineSeconds: 300
      ttlSecondsAfterFinished: 300
      template:
        metadata:
          annotations:
            rollme.proxyHash: 19514bab71d978154200cb24acbc4334cc95e5470ccab6e9216c99152171633a
            rollme.wizApiTokenHash: be7f348cb8721e285ea80fa05ef524362ac46a57b0539e78b390db2bb0acb1be
          labels:
            app.kubernetes.io/chartName: wiz-admission-controller
            app.kubernetes.io/instance: release-test
            app.kubernetes.io/version: "2.7"
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/name: release-test-wiz-admission-controller-manager
        spec:
          restartPolicy: Never
          serviceAccountName: release-test-wiz-admission-controller-manager
          securityContext:
            {}
          terminationGracePeriodSeconds: 60
          containers:
            - name: wiz-admission-controller
              securityContext:
                capabilities:
                  drop:
                  - ALL
                readOnlyRootFilesystem: true
                runAsNonRoot: true
                runAsUser: 1000
              image: "wiziopublic.azurecr.io/wiz-app/wiz-admission-controller:2.7"
              imagePullPolicy: Always
              command:
              - "/usr/bin/wiz-admission-controller"
              - "manager"
              # Cluster identification flags
              - "--update-deployments=release-test-wiz-admission-controller"
              # Auto update flags
              - "--auto-update-enabled=true"
              - "--release-namespace=release-helm-namespace"
              env:
              - name: WIZ_CLIENT_ID
                valueFrom:
                  secretKeyRef:
                    name: release-test-api-token
                    key: clientId
                    optional: false
              - name: WIZ_CLIENT_TOKEN
                valueFrom:
                  secretKeyRef:
                    name: release-test-api-token
                    key: clientToken
                    optional: false
              - name: WIZ_ENV
                value: 
              - name: LOG_LEVEL
                value: info
              - name: WIZ_RUNTIME_METADATA_POD_NAME
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.name
              - name: WIZ_RUNTIME_METADATA_NODE_NAME
                valueFrom:
                  fieldRef:
                    fieldPath: spec.nodeName
              - name: K8S_NAMESPACE
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.namespace
              - name: WIZ_TERMINATION_GRACE_PERIOD
                value: "60s"
              resources:
                {}
          volumes:
---
# Source: wiz-admission-controller/templates/opawebhook.yaml
apiVersion: v1
kind: Secret
type: kubernetes.io/tls
metadata:
  name: release-test-wiz-admission-controller-cert
  namespace: "release-helm-namespace"
  labels:
    app.kubernetes.io/chartName: wiz-admission-controller
    app.kubernetes.io/instance: release-test
    app.kubernetes.io/version: "2.7"
    app.kubernetes.io/managed-by: Helm
  annotations:
    # Using helm hook to create certs only for chart install
    "helm.sh/hook": "pre-install, pre-upgrade"
    "helm.sh/hook-delete-policy": "before-hook-creation"
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVWVENDQXoyZ0F3SUJBZ0lRRW5BTmkvNGFJVHRpWGRCTXJoQ0NUakFOQmdrcWhraUc5dzBCQVFzRkFEQW0KTVNRd0lnWURWUVFERXh0M2FYb3RZV1J0YVhOemFXOXVMV052Ym5SeWIyeHNaWEl0WTJFd0hoY05NalF4TVRBMwpNVFUwTlRRNVdoY05NelF4TVRBMU1UVTBOVFE1V2pBd01TNHdMQVlEVlFRREV5VnlaV3hsWVhObExYUmxjM1F0CmQybDZMV0ZrYldsemMybHZiaTFqYjI1MGNtOXNiR1Z5TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEEKTUlJQkNnS0NBUUVBbjJqRXR4eDZxaVpzQVJiWVZoM3Uva2kycHJzSnRiYXAxd1A2eGJwQWlNWk5qSTc0eGJLbwpCRGJ3WHM3a0x6Q3BtZU1hR2VLYml4cmFKVkEyR2ZBS25KRHA1ZlhFVWFEQVhrK1NVNFRMYllNRHQ4SkxaU25QCjlzM3k5aU1IRjh3NWZNYkNuQ2FWMGRYSGZlMzZ6SWxWblBHcjM1b0FETjIxZ2hHS0JQNkJmK0pFTTdrM01rdmcKZWgyeU9TV2x5QU05UXViSk1TYlJ6MFNjbWVTeDc5OC96VlVOSW1CZ2ZrWjNOTWRuS3pQTnJTMzFLam1mSjFwSQpzNk5lU2F0bUxtUS83VEJodkEyWStmeGxUa0R0aEJxSWtneUtvM2pLOXcxTjdtSlhscVQrVnFUUytzVDVnK1NLClBtQWlRb29RRWJ3WFRDdnBDcC9Pa2tUbkgzN01sSU5EdlFJREFRQUJvNElCY3pDQ0FXOHdEZ1lEVlIwUEFRSC8KQkFRREFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RQpBakFBTUI4R0ExVWRJd1FZTUJhQUZCbER5ZStJbit5UWRHbk0vZ28wQ1JWVXB1cXBNSUlCRFFZRFZSMFJCSUlCCkJEQ0NBUUNDUEhKbGJHVmhjMlV0ZEdWemRDMTNhWG90WVdSdGFYTnphVzl1TFdOdmJuUnliMnhzWlhJdWNtVnMKWldGelpTMW9aV3h0TFc1aGJXVnpjR0ZqWllKQWNtVnNaV0Z6WlMxMFpYTjBMWGRwZWkxaFpHMXBjM05wYjI0dApZMjl1ZEhKdmJHeGxjaTV5Wld4bFlYTmxMV2hsYkcwdGJtRnRaWE53WVdObExuTjJZNEk4Y21Wc1pXRnpaUzEwClpYTjBMWGRwZWkxaGRXUnBkQzFzYjJkekxXTnZiR3hsWTNSdmNpNXlaV3hsWVhObExXaGxiRzB0Ym1GdFpYTncKWVdObGdrQnlaV3hsWVhObExYUmxjM1F0ZDJsNkxXRjFaR2wwTFd4dlozTXRZMjlzYkdWamRHOXlMbkpsYkdWaApjMlV0YUdWc2JTMXVZVzFsYzNCaFkyVXVjM1pqTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFDb1VadWR6SHJMClNNdEtxcVgrKzc3eCtzbGFHa08rR1p4L1RJOUl2S1ZwU0JHZmVhWTFTa29wekdienZ4Sm5NYyswVkpwM1VEZXkKSVhHSGFIaXhpVUdPZ0ZnMWptRWtEdVNNOWI5Nm5tSjliSTlkdlJKaExsMHRkRVhCQUNGSXZibWFJUkVuQkI1VQpRRmk1cHN3ZlZiNTVjdTFtKzY1cHUrYjVlbk5IVnhYcE4zY0x5MzVWZzdDN1V2WWRkSmdQQS9NclQrQ1ZBWHlJCmF3TktDUDdOdnJjbHZ4N3dqYnVBdE43MS9zcFVOSzBRRjlmN0RtSGFlN2w1aEJTNnZWaGVGVmE5a3kra1ZWNlUKNU9GTTNraG0rV3VGSjdFd3ZhWTduUm9QbWcxQVBVTWd6TmxaWGpNUDZ0aWwxaGZvZ3NqS1UwV3V2UG9IUk5IMgoxWXNLKzFrSkd0d0QKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBbjJqRXR4eDZxaVpzQVJiWVZoM3Uva2kycHJzSnRiYXAxd1A2eGJwQWlNWk5qSTc0CnhiS29CRGJ3WHM3a0x6Q3BtZU1hR2VLYml4cmFKVkEyR2ZBS25KRHA1ZlhFVWFEQVhrK1NVNFRMYllNRHQ4SkwKWlNuUDlzM3k5aU1IRjh3NWZNYkNuQ2FWMGRYSGZlMzZ6SWxWblBHcjM1b0FETjIxZ2hHS0JQNkJmK0pFTTdrMwpNa3ZnZWgyeU9TV2x5QU05UXViSk1TYlJ6MFNjbWVTeDc5OC96VlVOSW1CZ2ZrWjNOTWRuS3pQTnJTMzFLam1mCkoxcElzNk5lU2F0bUxtUS83VEJodkEyWStmeGxUa0R0aEJxSWtneUtvM2pLOXcxTjdtSlhscVQrVnFUUytzVDUKZytTS1BtQWlRb29RRWJ3WFRDdnBDcC9Pa2tUbkgzN01sSU5EdlFJREFRQUJBb0lCQUVtN1l1bXpVWVZyK2g3UwoyME9SMnQ1ZzhhTFM5bDNIWEcxb21OQm1JcjFndzdQVTJYcFA5V2pscEc2bDBXT0daWndaTUJSeS9URHRQYU51Cm8yZUI0TmFrTEp2Qi9va25Dbk5VNk1DYXRxRXpyVCtNcmVUZjN5SXdCa1lVMDQ0TlZ6WEFsWGsyVzZ2UDd0THYKaFVhZjZ5cUptYzcxNHpvUVBva241YWdEdEJCYTg5WlFDREdHMmhieU1HUHpsREF0ZUNETDF2bVNXZ2tOOStkOApTcmVMdFB3RVhvQ051UDJ1LzBzOTZOUmt3OHJDTzlNN1crbkhIaXdnemhPL3VmcmNpaVRNY2tVSjU0bEpRZzB0Ci9NQlM4NzVTQTdrWUpLL3lIWFkrdEswZHY2NjY2NDMyY002bkNUZWRtU29sZm1zRWpRSFJYL0FqUnFEYkM3dGYKcmc0dU1CMENnWUVBMHQ1dzFrWlJEcU11ZU8xNjZPd3dKZkU1ZDZxbE13Q0dLVjlTYmNoRUNDWVN1cnM2NmhaRgpDR2k1MkNrVVNYTGI0b29RUUY5SWVkam9oQmQrM1JycFlRWEtjMU9WbTF5K2Eyc0EzN09McHJwY2gySHJDM0o0CnMxMENlcWVjb3ZVT2c4eVRSSWtORDlEaWd1Rk1BYXZWdlNJTFp3aHg3QVhsRVpYeUVCWnFxeThDZ1lFQXdZYlgKSkFzK1cvOGw5RmJTeG4wQktEMjBVQ01OZWYzUEkySkRJZjdDKzBGbDlOSnpEWGlSR0R0R1dpV24xRXJqME1IbQpFYXp0SmRJNzgrUGZIS2pwN09MbWU5NnhJRTQ2OTM1MjhLYVVWbFZudUtSQkR4UmUyTFJydERJS3VTdDNEMEJJCnErUmFlU0ZNcXVBK21iVEM5VVF4dEZJZzJ4KzJZbDNFS0o0dmxOTUNnWUVBZ2QzeERHWmVBVy9LYlR1RTJQS3QKYkpDMTNkZEF5cnBsNWhFSXlRZnZyajBVaCtCTGxtT0V2SHNUQ2VleTBORm1Ub3pOR1hnVlFNV3YzYnBDclpXbgphZE9STFptcXAvWmtaKytNcURrQnB2dGJoUjF2RHF1L1htZkg0UlpkUjVjNUN6N3c2K0trSXJ0NDVUWXdBMDk2CjRYS1lKeXB5VHZRS2Nkd3hLbXRENG8wQ2dZRUFwYXZ4Y1lIT21LTU1zdWZBK1ByNmlxQ0lSREk5enpsZ29rSDAKaHAyNS9hNDJ3aWVISnZrWC9VNkJJNXNvMmF4aTZzdVRVWDVnWmdoY0dxWHcwbkFvRWdzTWxPNUhaQWlVb2xzNQpKenJ6c2hUYS9rNWZBN0hFb0crVDVHY1Nsd0tHb2grK0Zxa2VhcVAvSmlsaWJlTTVJdzZHSG9CUWNFWHR0TGZnCnZZVHQ1dEVDZ1lBaVU1MDF0NlhEZzh6R1VNTDJkdmRSaDlWZ2E2aWlsbTArc0o1M0tIVk4rRjJwWTlxVlNGN1oKaHJJREJPQXRZUk42bEJVVnVvN1V3RWQxWkRzQncrRHBBbjVncVNsdUlJa050akt2NGZGaFF4ZXM2M3M1aWtUaQphRXNPaVB1S0JwcWswWStYYVlIRGNzOFk0YWg5R0kyT2p0UHRTTk42UzJlZE51N2hpaVBWQlE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: wiz-admission-controller/templates/opawebhook.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: release-test-wiz-admission-controller-misconfigurations
  namespace: "release-helm-namespace"
  labels:
    app.kubernetes.io/chartName: wiz-admission-controller
    app.kubernetes.io/instance: release-test
    app.kubernetes.io/version: "2.7"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": "post-install, post-upgrade"
    "helm.sh/hook-delete-policy": "before-hook-creation"
webhooks:
- name: misconfigurationsadmissionvalidator.wiz.io
  admissionReviewVersions: ["v1", "v1beta1"]
  clientConfig:
    service:
      namespace: release-helm-namespace
      name: release-test-wiz-admission-controller
      path: /opa-validator
      port: 443
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVWVENDQXoyZ0F3SUJBZ0lRRW5BTmkvNGFJVHRpWGRCTXJoQ0NUakFOQmdrcWhraUc5dzBCQVFzRkFEQW0KTVNRd0lnWURWUVFERXh0M2FYb3RZV1J0YVhOemFXOXVMV052Ym5SeWIyeHNaWEl0WTJFd0hoY05NalF4TVRBMwpNVFUwTlRRNVdoY05NelF4TVRBMU1UVTBOVFE1V2pBd01TNHdMQVlEVlFRREV5VnlaV3hsWVhObExYUmxjM1F0CmQybDZMV0ZrYldsemMybHZiaTFqYjI1MGNtOXNiR1Z5TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEEKTUlJQkNnS0NBUUVBbjJqRXR4eDZxaVpzQVJiWVZoM3Uva2kycHJzSnRiYXAxd1A2eGJwQWlNWk5qSTc0eGJLbwpCRGJ3WHM3a0x6Q3BtZU1hR2VLYml4cmFKVkEyR2ZBS25KRHA1ZlhFVWFEQVhrK1NVNFRMYllNRHQ4SkxaU25QCjlzM3k5aU1IRjh3NWZNYkNuQ2FWMGRYSGZlMzZ6SWxWblBHcjM1b0FETjIxZ2hHS0JQNkJmK0pFTTdrM01rdmcKZWgyeU9TV2x5QU05UXViSk1TYlJ6MFNjbWVTeDc5OC96VlVOSW1CZ2ZrWjNOTWRuS3pQTnJTMzFLam1mSjFwSQpzNk5lU2F0bUxtUS83VEJodkEyWStmeGxUa0R0aEJxSWtneUtvM2pLOXcxTjdtSlhscVQrVnFUUytzVDVnK1NLClBtQWlRb29RRWJ3WFRDdnBDcC9Pa2tUbkgzN01sSU5EdlFJREFRQUJvNElCY3pDQ0FXOHdEZ1lEVlIwUEFRSC8KQkFRREFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RQpBakFBTUI4R0ExVWRJd1FZTUJhQUZCbER5ZStJbit5UWRHbk0vZ28wQ1JWVXB1cXBNSUlCRFFZRFZSMFJCSUlCCkJEQ0NBUUNDUEhKbGJHVmhjMlV0ZEdWemRDMTNhWG90WVdSdGFYTnphVzl1TFdOdmJuUnliMnhzWlhJdWNtVnMKWldGelpTMW9aV3h0TFc1aGJXVnpjR0ZqWllKQWNtVnNaV0Z6WlMxMFpYTjBMWGRwZWkxaFpHMXBjM05wYjI0dApZMjl1ZEhKdmJHeGxjaTV5Wld4bFlYTmxMV2hsYkcwdGJtRnRaWE53WVdObExuTjJZNEk4Y21Wc1pXRnpaUzEwClpYTjBMWGRwZWkxaGRXUnBkQzFzYjJkekxXTnZiR3hsWTNSdmNpNXlaV3hsWVhObExXaGxiRzB0Ym1GdFpYTncKWVdObGdrQnlaV3hsWVhObExYUmxjM1F0ZDJsNkxXRjFaR2wwTFd4dlozTXRZMjlzYkdWamRHOXlMbkpsYkdWaApjMlV0YUdWc2JTMXVZVzFsYzNCaFkyVXVjM1pqTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFDb1VadWR6SHJMClNNdEtxcVgrKzc3eCtzbGFHa08rR1p4L1RJOUl2S1ZwU0JHZmVhWTFTa29wekdienZ4Sm5NYyswVkpwM1VEZXkKSVhHSGFIaXhpVUdPZ0ZnMWptRWtEdVNNOWI5Nm5tSjliSTlkdlJKaExsMHRkRVhCQUNGSXZibWFJUkVuQkI1VQpRRmk1cHN3ZlZiNTVjdTFtKzY1cHUrYjVlbk5IVnhYcE4zY0x5MzVWZzdDN1V2WWRkSmdQQS9NclQrQ1ZBWHlJCmF3TktDUDdOdnJjbHZ4N3dqYnVBdE43MS9zcFVOSzBRRjlmN0RtSGFlN2w1aEJTNnZWaGVGVmE5a3kra1ZWNlUKNU9GTTNraG0rV3VGSjdFd3ZhWTduUm9QbWcxQVBVTWd6TmxaWGpNUDZ0aWwxaGZvZ3NqS1UwV3V2UG9IUk5IMgoxWXNLKzFrSkd0d0QKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  rules:
    - apiGroups:
      - '*'
      apiVersions:
      - '*'
      operations:
      - CREATE
      - UPDATE
      resources:
      - namespaces
      - configmaps
      - ingresses
      - services
      - pods
      - deployments
      - jobs
      - cronjobs
      - replicasets
      - statefulsets
      - daemonsets
  namespaceSelector:
    matchExpressions:
    - key: kubernetes.io/metadata.name
      operator: NotIn
      values:
      - kube-system
      - kube-node-lease
  timeoutSeconds: 8
  failurePolicy: Ignore
  sideEffects: None