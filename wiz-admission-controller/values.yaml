# Default values for wiz-admission-controller.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

nameOverride: "" # Override the release’s name.
fullnameOverride: "" # Override the release’s full name.
commonLabels: {} # Labels applied on all the resources (not used for selection)
clusterDisplayName: "" # Optional. Overrides the Wiz deployment name. If left empty, the cluster external ID will be used to derive the cluster name.

# Wiz Service Account used to authenticate to Wiz.
wizApiToken:
  clientId: "" # Client ID of the Wiz Service Account.
  clientToken: "" # Client secret of the Wiz Service Account.
  clientEndpoint: "" # Defaults to commercial.

  secret:
    # Should a Secret be created by the chart or not.
    # Set this to false if you wish to create the Secret yourself or using another tool.
    # The Secret should contain clientId for the ID and clientToken for the token.
    create: true
    # Annotations to add to the secret.
    annotations: {}
    # The name of the Wiz Service Account Secret.
    name: ""

  # Not suggested: avoid storing sensitive data in environment variables.
  # Read API token from an environment file, which is specified in podCustomEnvironmentVariablesFile
  # The file must contain the following lines:
  # WIZ_CLIENT_ID=<wiz service account id>
  # WIZ_CLIENT_TOKEN=<siz service account token>
  # Implies `secret.enabled: false`.
  usePodCustomEnvironmentVariablesFile: false

  # Set the `wizApiTokensVolumeMount` below to a non-empty string if you are passing the Wiz service account
  # token (client id and client token) via mounts, e.g. when using the Vault operator to inject secrets to Pods.
  # In this case you are responsible for creating the mounts.
  # You must also set `.Values.customVolumes` and `.Values.customVolumeMounts`.
  # The mounts must have at least these 2 files:
  # clientId - with this content: <wiz service account id>
  # clientToken - with this content: <wiz service account token>
  #
  # e.g. wizApiTokensVolumeMount: "/var/api-client/"
  #      and this is how the mount looks like on the file system:
  #      /var/api-client/clientId
  #      /var/api-client/clientToken
  #
  # Implies `secret.enabled: false`.
  wizApiTokensVolumeMount: ""

# Redirect HTTP and/or HTTPS traffic through a proxy.
httpProxyConfiguration:
  enabled: false # Should the components use a proxy.

  # Should a Secret be created by the chart or not.
  # Set this to false if you wish to create the Secret yourself or using another tool.
  # The Secret should contain httpProxy, httpsProxy and noProxyAddress.
  create: true
  secretName: "" # The name of the proxy Secret.
  annotations: {} # Annotations to be set on the secret
  httpProxy: "" # URL to use as a proxy for outbound HTTP traffic.
  httpsProxy: "" # URL to use as a proxy for outbound HTTPS traffic.
  noProxyAddress: "kubernetes,kubernetes.default,kubernetes.default.svc,kubernetes.default.svc.cluster.local"

# When Horizontal Pod Autoscaling (`hpa.enabled`) is enabled (`true`),
# this field is discarded and set to an empty value.
replicaCount: 2

# Use PodDisruptionBudget for the admission controller enforcer deployment.
# For more information about PodDisruptionBudget please refer to:
# https://kubernetes.io/docs/tasks/run-application/configure-pdb/
podDisruptionBudget:
  enabled: false # Should a PodDisruptionBudget be created by the chart or not.
  minAvailable: 1
  maxUnavailable: null

image:
  registry: wiziopublic.azurecr.io/wiz-app
  repository: wiz-admission-controller
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: [] # Secrets for container image registry keys as described in https://kubernetes.io/docs/concepts/containers/images/#referring-to-an-imagepullsecrets-on-a-pod

priorityClassName: ""

webhook:
  errorEnforcementMethod: "AUDIT" # AUDIT/ BLOCK
                                  # This field determines what happens when Wiz Admission Controller
                                  # has an internal error during processing / parsing of admission reviews.
                                  #
                                  # Valid values are AUDIT and BLOCK. The default is set to AUDIT.
                                  #
                                  # If an admission review is parsed correctly, the decision to AUDIT/BLOCK
                                  # depends on the applied policies or the `policyEnforcementMethod`
                                  # (if it is set).

  policyEnforcementMethod: ""     # AUDIT / BLOCK / ""
                                  # Set this to override any admission policy action.
                                  # Each Admission Policy in Wiz has an Admission Controller Action
                                  # that either audits or blocks failed admission reviews, i.e.
                                  # admission reviews that didn't pass one of the cloud configuration
                                  # rules associated with the policy.
                                  #
                                  # The `policyEnforcementMethod` field allows one to override the behavior
                                  # set for all policies such that regardless of their Admission Controller Action,
                                  # Wiz Admission controller would either AUDIT or BLOCK.
                                  #
                                  # For example, setting this to AUDIT would cause all policies
                                  # to audit the admission reviews, even if some of them are set to
                                  # block on the failed events.
                                  #
                                  # Valid values are AUDIT and BLOCK or "". The default is set to ""
                                  # which means that each policy individually dictates the AUDIT/BLOCK
                                  # behavior.

  clusterExternalId: "" # Wiz cluster external id (required only for on-prem and OKE clusters)
  subscriptionExternalId: "" # Optional. Used to associate the installation with a Subscription if none can be obtained from IMDS (e.g. on-prem)
  clusterTags: {} # Optional. List of key: value tags to be added to KubernetesCluster object associated with this installation
  subscriptionTags: {} # Optional. List of key: value tags to be added to Subscription object associated with this installation

  injectCaFrom: "" # Inject Certificate to webhook configurations. Format: "namespace/certificate". Prerequisite - https://cert-manager.io/docs/installation.
  createSelfSignedCert: false # Create and use a self-signed certificate using `cert-manager`. Prerequisite - https://cert-manager.io/docs/installation.
  secret:
    name: "" # Name of the Certificate secret.
    annotations: {} # Annotations of the Certificate secret.

customErrorMessage: "" # Custom error message to prepend to the returned error message when the admission check fails (If opaWebhook.customErrorMessage or imageIntegrityWebhook.customErrorMessage is set, it will take precedence).

opaWebhook:
  enabled: true
  # Override to run admission controller on specific resources.
  rules: # https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#matching-requests-rules
    - operations:
      - CREATE
      - UPDATE
      apiGroups:
      - "*"
      apiVersions:
      - "*"
      resources:
      - "namespaces"
      - "configmaps"
      - "ingresses"
      - "services"
      - "pods"
      - "deployments"
      - "jobs"
      - "cronjobs"
      - "replicasets"
      - "statefulsets"
      - "daemonsets"
  namespaceSelector:  # https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#matching-requests-namespaceselector
    matchExpressions:
    - key: kubernetes.io/metadata.name # Using "kubernetes.io/metadata.name" key to exclude specific namespaces (https://github.com/kubernetes/enhancements/blob/master/keps/sig-api-machinery/2161-apiserver-default-labels/README.md#proposal)
      operator: NotIn
      values:
      - kube-system
      - kube-node-lease
      - wiz

  timeoutSeconds: 8 # https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#timeouts
  sideEffects: None # https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#side-effects

  policies: [] # List of policies to enforce on the misconfiguration webhook. If not set, by default AC will get policies from Wiz based on projects.

  # Deprecated, don't use!
  errorEnforcementMethod: ""  # Deprecated, use `webhook.errorEnforcementMethod` instead
  policyEnforcementMethod: "" # Deprecated, use `webhook.policyEnforcementMethod` instead
  clusterExternalId: "" # Deprecated, use `webhook.clusterExternalId` instead
  secret: # Deprecated, use `webhook.secret` instead
    annotations: {}

  customErrorMessage: "" # Custom error message to prepend to the returned error message when the OPA admission check fails.

imageIntegrityWebhook:
  enabled: false
  policies: [] # List of policies to enforce on the image integrity webhook. If not set, by default AC will get policies from Wiz based on projects.

    # Override to run admission controller on specific resources.
  rules: # https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#matching-requests-rules
    - operations:
      - CREATE
      - UPDATE
      apiGroups:
      - "*"
      apiVersions:
      - "*"
      resources:
      - "pods"
      - "deployments"
      - "jobs"
      - "cronjobs"
      - "replicasets"
      - "statefulsets"
      - "daemonsets"
  namespaceSelector:  # https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#matching-requests-namespaceselector
    matchExpressions:
    - key: kubernetes.io/metadata.name # Using "kubernetes.io/metadata.name" key to exclude specific namespaces (https://github.com/kubernetes/enhancements/blob/master/keps/sig-api-machinery/2161-apiserver-default-labels/README.md#proposal)
      operator: NotIn
      values:
      - kube-system
      - kube-node-lease
      - wiz

  timeoutSeconds: 8 # https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#timeouts
  sideEffects: None # https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#side-effects

  cacheImageDigestTTL: 1m # The TTL of the cache for the image digest. The cache is used to avoid querying the image registry for the same image digest multiple times.
  cacheImageVerifyTTL: 5m # The TTL of the cache for the image verification. The cache is used to avoid verifying the same image multiple times.

  patchImageDigestAnnotation: true # If true, annotate the pod with mapping between tag->digest.
  customErrorMessage: "" # Custom error message to prepend to the returned error message when the image integrity check fails.

# This webhooks sends the audit logs to Wiz, and should never block any requests.
kubernetesAuditLogsWebhook:
  enabled: false

  nameOverride: "" # Override the audit logs deployment name.
  replicaCount: 2
  # Use PodDisruptionBudget for the admission controller audit logs deployment.
  # For more information about PodDisruptionBudget please refer to:
  # https://kubernetes.io/docs/tasks/run-application/configure-pdb/
  podDisruptionBudget:
    enabled: false # Should a PodDisruptionBudget be created by the chart or not.
    minAvailable: 1
    maxUnavailable: null

  # Override to run audit logs collector on specific resources.
  rules: # https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#matching-requests-rules
    - operations:
      - "*"
      apiGroups:
      - "*"
      apiVersions:
      - "*"
      resources:
        - "namespaces"
        - "secrets"
        - "configmaps"
        - "storageclasses"
        - "persistentvolumes"
        - "persistentvolumeclaims"
        - "controllerrevisions"
        - "ingresses"
        - "services"
        - "networkpolicies"
        - "pods"
        - "deployments"
        - "jobs"
        - "cronjobs"
        - "replicasets"
        - "statefulsets"
        - "daemonsets"
        - "replicationcontrollers"
        - "subjectaccessreviews"
        - "selfsubjectrulesreviews"
        - "selfsubjectreviews"
        - "pods/exec"
        - "pods/portforward"
        - "pods/attach"
        - "clusterroles"
        - "roles"
        - "rolebindings"
        - "clusterrolebindings"
        - "serviceaccounts"
    - operations:
        - "DELETE"
      apiGroups:
        - "*"
      apiVersions:
        - "*"
      resources:
        - "events"
  namespaceSelector:  # https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#matching-requests-namespaceselector
    matchExpressions:
    - key: kubernetes.io/metadata.name # Using "kubernetes.io/metadata.name" key to exclude specific namespaces (https://github.com/kubernetes/enhancements/blob/master/keps/sig-api-machinery/2161-apiserver-default-labels/README.md#proposal)
      operator: NotIn
      values:
      - kube-system
      - kube-node-lease
      - wiz

  timeoutSeconds: 8 # https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#timeouts
  sideEffects: None # https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#side-effects


# Debug webhook only logs the request
debugWebhook:
  enabled: false
  # Override to run admission controller on specific resources.
  rules: # https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#matching-requests-rules
    - operations:
      - CREATE
      - UPDATE
      apiGroups:
      - "*"
      apiVersions:
      - "*"
      resources:
      - "namespaces"
      - "secrets"
      - "configmaps"
      - "storageclasses"
      - "persistentvolumes"
      - "persistentvolumeclaims"
      - "controllerrevisions"
      - "ingresses"
      - "services"
      - "networkpolicies"
      - "pods"
      - "deployments"
      - "jobs"
      - "cronjobs"
      - "replicasets"
      - "statefulsets"
      - "daemonsets"
  namespaceSelector:  # https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#matching-requests-namespaceselector
    matchExpressions:
    - key: kubernetes.io/metadata.name # Using "kubernetes.io/metadata.name" key to exclude specific namespaces (https://github.com/kubernetes/enhancements/blob/master/keps/sig-api-machinery/2161-apiserver-default-labels/README.md#proposal)
      operator: NotIn
      values:
      - kube-system
      - kube-node-lease
      - wiz

  timeoutSeconds: 8 # https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#timeouts
  sideEffects: None # https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#side-effects


# The following values are used for image integrity webhook.
imageRegistryClient:
  # Should a Role and RoleBinding be created by the chart or not.
  createRole: true
  # Secret names for container image registry as described in https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry
  pullSecrets: []
  # Namespace of the pull secrets.
  secretsNamespace: "default"
  # List of credential helpers to use, Can be one of amazon, azure, google, github.
  credentialHelpers: []
  # The interval of the background reloader cache for image pull secrets. The cache is used to avoid querying the cluster for the same image pull secrets multiple times.
  cacheImagePullSecretsInterval: 5m
  # Ignore missing secret error on startup, the admission controller will continue to run without the secret value and tries to fetch the secret every cacheImagePullSecretsInterval.
  # Useful when the secret is not available at the time of startup.
  ignoreMissingSecretError: false

kubernetesApiServer:
  cacheNamespaceLabelsTTL: 10m # The interval of the background reloder cache for namespace labels. The cache is used to avoid querying cluster for the same namespace multiple times.

# K8s service account to be used by the pod(s)
serviceAccount:
  # If `create` is set to `false`` an existing service account will be used
  create: true
  createRbac: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If empty, a name is generated using the fullname template
  name: ""

podAnnotations: {} # Annotations to add to the components Pods.
podLabels: {} # Labels to add to the components Pods.

podSecurityContext: {}

podCustomEnvironmentVariables: [] # Additional environment variables to add to the components Pods as pairs “name”, “value”.

podCustomEnvironmentVariablesFile: ""

# Set the log level. Can be one of "debug", "info", "warn", or "error".
# Warning: Do not set to `debug` in production environments, or sensitive data may be written to the logs.
logLevel: "info"

securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

service:
  type: ClusterIP
  port: 443
  targetPort: 10250 # The port 10250 has been selected to bypass the private GKE firewall between the API server and the pods (https://cloud.google.com/kubernetes-engine/docs/how-to/private-clusters#api_request_that_triggers_admission_webhook_timing_out)

# Specifies if the webhook should be started in hostNetwork mode.
#
# Required for use in some managed kubernetes clusters (such as AWS EKS) with custom
# CNI (such as calico), because control-plane managed by AWS cannot communicate
# with pods' IP CIDR and admission webhooks are not working
#
# Since the default port for the webhook conflicts with kubelet on the host
# network, `service.targetPort` should be changed to an available port if
# running in hostNetwork mode.
hostNetwork: false

# Port of the health server used by the readiness and liveness probes
healthPort: 8000

# Configuration options for NetworkPolicy
networkPolicy:
  ingress:
    enabled: false # If true, deny all incoming traffic from all pods without kubernetes.io/metadata.name: kube-system label.

tlsCertificate:
  # For using generated custom certificate set create to false and set the values
  create: true
  tlsCertificate: ""
  tlsKey: ""

# Uncomment the `resources` section below to specify custom resource requests and limits.
# If left blank, and Horizontal Pod Autoscaling (`hpa.enabled`) is enabled, the following defaults will be applied:
#   requests:
#     cpu: 500m
#     memory: 300Mi
#
# resources:
  ## The recommended values should vary depending on the load in each cluster, the number of replicas, and more.
  ## To make sure we cover most cases, the following is a suggestion for environments with a high load, we recommend adjusting it based on your needs.
  # requests:
  #   cpu: 0.5
  #   memory: 256M
  # limits:
  #   cpu: 1
  #   memory: 512M

customVolumes: []
customVolumeMounts: []

nodeSelector: {}
tolerations: []
affinity: {}

probes: # Probes config for the container
# https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
# Note that httpGet already configured in the deployment.yaml
  startupProbe:
    initialDelaySeconds: 5
    timeoutSeconds: 300 # 5 minutes
    failureThreshold: 30 # 10s(default) * 30 attempts = 300 seconds for it to finish

  readinessProbe:
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 30
    failureThreshold: 1

  livenessProbe:
    initialDelaySeconds: 5
    timeoutSeconds: 30
    failureThreshold: 3

# Horizontal Pod Autoscaling.
# Prerequisites: metrics-server installed on the cluster:
# https://github.com/kubernetes-sigs/metrics-server
hpa:
  enabled: false
  minReplicas: 2
  maxReplicas: 5
  enableCPU: true
  targetCPUUtilizationPercentage: 80
  customMetrics: []
  # Uncomment the `behavior` section below to specify custom scaling policies and behavior.
  # If left blank, the following default settings are applied:
  # behavior:
  #   scaleUp:
  #     stabilizationWindowSeconds: 300
  #   scaleDown:
  #     stabilizationWindowSeconds: 300
  #     policies:
  #     - type: Pods
  #       value: 1
  #       periodSeconds: 300

wizManager:
  enabled: true # Should the Wiz Manager be deployed.

  autoRolloutRestart:
    enabled: true # Should the manager trigger rollout restarts.

  nameOverride: "" # Override the manager deployment name.
  schedule: "0 * * * *"  # Every 1 hour
  timeoutSeconds: 300 # The timeout for the manager job in seconds.
  cleanupJobSeconds: 300 # The time in seconds after which the job should be deleted.

  # K8s service account to be used by the manager
  serviceAccount:
    # If `create` is set to `false`` an existing service account will be used
    create: true
    createRbac: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If empty, a name is generated using the nameOverride
    name: ""

# Global values to override chart values.
global:
  nameOverride: "" # Override the release’s name.
  fullnameOverride: "" # Override the full name of the release.
  commonLabels: {} # Labels applied on all the resources (not used for selection)

  # Wiz Service Account used to authenticate to Wiz.
  wizApiToken:
    clientId: ""
    clientToken: ""
    clientEndpoint: "" # Defaults to commercial.

    secret:
      # The name of the Wiz Service Account Secret.
      name: ""

  # Redirect HTTP and/or HTTPS traffic through a proxy.
  httpProxyConfiguration:
    enabled: false # Should the components use a proxy.
    secretName: "" # The name of the proxy Secret.

    httpProxy: ""
    httpsProxy: ""
    noProxyAddress: "kubernetes,kubernetes.default,kubernetes.default.svc,kubernetes.default.svc.cluster.local"

  image:
    registry: "" # Registry to get the container images from.
    pullPolicy: "" # Container image pull policy. One of Always, Never, IfNotPresent.
  imagePullSecrets: [] # Secrets for container image registry keys as described in https://kubernetes.io/docs/concepts/containers/images/#referring-to-an-imagepullsecrets-on-a-pod

  podAnnotations: {} # Annotations to add to the components Pods.
  podLabels: {} # Labels to add to the components Pods.

  podCustomEnvironmentVariables: [] # Additional environment variables to add to the components Pods as pairs “name”, “value”.
  customVolumes: [] # Additional volumes to add to the components Pods
  customVolumeMounts: [] # Additional volume mounts to add to the components Pods

  nodeSelector: {} # custom assignment to nodes
  affinity: {} # custom affinity rules for node assignment
  tolerations: [] # custom tolerations
  clusterExternalId: "" # Required for OKE clusters - specify the cluster's OCID
  podTerminationGracePeriodSeconds: 60 # The grace period for pod termination in seconds. The value must be non-negative integer.
  subscriptionExternalId: ""
  clusterTags: {}
  subscriptionTags: {}
  clusterDisplayName: "" # Optional. Overrides the Wiz deployment name. If left empty, the cluster external ID will be used to derive the cluster name.

  # Set this to true if you are using Istio in sidecar mode.
  # When Istio uses sidecars, there are 2 issues when deploying cronJob:
  # 1) The creation and deletion Jobs never complete (due to istio-proxy sidecar)
  # 2) There is a race condition and possible network connectivity failures
  #    when contacting the Wiz backend.
  #
  # When either of this happens, either the installation, upgrade or uninstallation
  # of the charts fail.
  # Setting this to true ensures that the istio-proxy gets a graceful shutdown
  # and mitigates the networking race condition by waiting for the server to run before the Job starts.
  # Learn more:
  # https://istio.io/latest/blog/2023/native-sidecars/
  istio:
    enabled: false
    proxySidecarPort: 15000

  # Wiz Helm Charts process the security contexts
  # in the following order:
  # 1. Pod security context
  #    lowPrivilegePodSecurityPolicy -> podSecurityContext
  # 2. Containers security context
  #    lowPrivilegeSecurityPolicy -> securityContext
  #
  # Populating the following overrides lowPrivilegeSecurityPolicy to your user-supplied values.yaml
  # allows you to customize and override the defaults
  # (useful for e.g. OpenShift installations that automatically
  #  mutate the Pod and use the first UID and first GID from
  #  the allowed range to run the Pod).
  #
  # lowPrivilegePodSecurityPolicy: {}
  # lowPrivilegeSecurityPolicy: {}
