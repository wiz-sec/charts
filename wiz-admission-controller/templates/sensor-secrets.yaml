{{- if .Values.sensorInject.enabled }}

{{- /* Registry Secret Creation */ -}}
{{- if .Values.sensorInject.registrySecret.create }}
{{- $registrySecretName := .Values.sensorInject.registrySecret.name }}
{{- $registryNamespaces := .Values.sensorInject.registrySecret.namespaces }}

{{- /* Determine docker config based on replication mode */ -}}
{{- $dockerConfigJson := "" }}
{{- if .Values.sensorInject.registrySecret.replicateFromReleaseNamespace }}
  {{- /* Replicate from existing secret in release namespace */ -}}
  {{- $sourceSecretName := required "sensorInject.registrySecret.name is required when replicateFromReleaseNamespace is true" .Values.sensorInject.registrySecret.name }}
  {{- $sourceSecret := lookup "v1" "Secret" .Release.Namespace $sourceSecretName }}
  {{- if not $sourceSecret }}
    {{- fail (printf "Secret '%s' not found in namespace '%s'. Please create the secret first or set replicateFromReleaseNamespace to false." $sourceSecretName .Release.Namespace) }}
  {{- end }}
  {{- if not $sourceSecret.data }}
    {{- fail (printf "Secret '%s' in namespace '%s' has no data" $sourceSecretName .Release.Namespace) }}
  {{- end }}
  {{- if not (index $sourceSecret.data ".dockerconfigjson") }}
    {{- fail (printf "Secret '%s' in namespace '%s' does not contain '.dockerconfigjson' key" $sourceSecretName .Release.Namespace) }}
  {{- end }}
  {{- $dockerConfigJson = index $sourceSecret.data ".dockerconfigjson" }}
{{- else }}
  {{- /* Use explicit values from configuration */ -}}
  {{- $dockerServer := required "sensorInject.registrySecret.dockerServer is required when registrySecret.create is true and replicateFromReleaseNamespace is false" .Values.sensorInject.registrySecret.dockerServer }}
  {{- $dockerUsername := required "sensorInject.registrySecret.dockerUsername is required when registrySecret.create is true and replicateFromReleaseNamespace is false" .Values.sensorInject.registrySecret.dockerUsername }}
  {{- $dockerPassword := required "sensorInject.registrySecret.dockerPassword is required when registrySecret.create is true and replicateFromReleaseNamespace is false" .Values.sensorInject.registrySecret.dockerPassword }}
  {{- $dockerConfigJson = printf `{"auths":{"%s":{"username":"%s","password":"%s","auth":"%s"}}}` $dockerServer $dockerUsername $dockerPassword (printf "%s:%s" $dockerUsername $dockerPassword | b64enc) | b64enc }}
{{- end }}

{{- /* Determine target namespaces for registry secrets */ -}}
{{- $registryTargetNamespaces := list -}}
{{- if and $registryNamespaces (eq (len $registryNamespaces) 1) (eq (index $registryNamespaces 0) "*") }}
  {{- /* Get all namespaces from cluster */ -}}
  {{- range $index, $ns := (lookup "v1" "Namespace" "" "").items -}}
    {{- /* Skip system namespaces and release namespace */ -}}
    {{- if or (eq $ns.metadata.name "kube-system") (eq $ns.metadata.name "kube-public") (eq $ns.metadata.name "kube-node-lease") (eq $ns.metadata.name $.Release.Namespace) }}
      {{/*Do nothing*/}}
    {{- /* Skip if Values.sensorInject.registrySecret.excludeNamespaces contains the namespace */ -}}
    {{- else if (has $ns.metadata.name $.Values.sensorInject.registrySecret.excludeNamespaces) }}
      {{/*Do nothing*/}}
    {{- else}}
      {{- $registryTargetNamespaces = append $registryTargetNamespaces $ns.metadata.name -}}
    {{- end -}}
  {{- end -}}
{{- else }}
  {{- /* Use specific namespaces from values */ -}}
  {{- $registryTargetNamespaces = $registryNamespaces -}}
{{- end -}}

{{- /* Create registry secrets in all target namespaces */ -}}
{{- range $namespace := $registryTargetNamespaces }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ $registrySecretName }}
  namespace: {{ $namespace }}
  labels:
    {{- include "wiz-admission-controller.labels" $ | nindent 4 }}
  {{- with $.Values.sensorInject.registrySecret.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: {{ $dockerConfigJson }}
{{- end }}
{{- end }}

{{- /* API Key Secret Creation */ -}}
{{- if .Values.sensorInject.apiKeySecret.create }}
{{- $apiKeySecretName := include "wiz-admission-controller.secretApiTokenName" . }}
{{- $apiKeyNamespaces := .Values.sensorInject.apiKeySecret.namespaces }}

{{- /* Determine clientId and clientToken based on replication mode */ -}}
{{- $clientId := "" }}
{{- $clientToken := "" }}
{{- if .Values.sensorInject.apiKeySecret.replicateFromReleaseNamespace }}
  {{- /* Replicate from existing secret in release namespace */ -}}
  {{- $sourceSecretName := required "one of sensorInject.apiKeySecret.name or wizApiToken.secret.name or global.wizApiToken.secret.name is required when replicateFromReleaseNamespace is true" (include "wiz-admission-controller.sensorApiKeySecretName" .) }}
  {{- $sourceSecret := lookup "v1" "Secret" .Release.Namespace $sourceSecretName }}
  {{- if not $sourceSecret }}
    {{- fail (printf "Secret '%s' not found in namespace '%s'. Please create the secret first or set replicateFromReleaseNamespace to false." $sourceSecretName .Release.Namespace) }}
  {{- end }}
  {{- if not $sourceSecret.data.clientId }}
    {{- fail (printf "Secret '%s' in namespace '%s' does not contain 'clientId' key" $sourceSecretName .Release.Namespace) }}
  {{- end }}
  {{- if not $sourceSecret.data.clientToken }}
    {{- fail (printf "Secret '%s' in namespace '%s' does not contain 'clientToken' key" $sourceSecretName .Release.Namespace) }}
  {{- end }}
  {{- $clientId = $sourceSecret.data.clientId }}
  {{- $clientToken = $sourceSecret.data.clientToken }}
{{- else }}
  {{- /* Use explicit values from configuration */ -}}
  {{- $clientId = required "one of sensorInject.apiKeySecret.clientId, wizApiToken.clientId, global.wizApiToken.clientId is required when apiKeySecret.create is true and replicateFromReleaseNamespace is false" (coalesce .Values.sensorInject.apiKeySecret.clientId .Values.wizApiToken.clientId .Values.global.wizApiToken.clientId) | b64enc }}
  {{- $clientToken = required "one of sensorInject.apiKeySecret.clientToken, wizApiToken.clientToken, global.wizApiToken.clientToken is required when apiKeySecret.create is true and replicateFromReleaseNamespace is false" (coalesce .Values.sensorInject.apiKeySecret.clientToken .Values.wizApiToken.clientToken .Values.global.wizApiToken.clientToken) | b64enc }}
{{- end }}

{{- /* Determine target namespaces for API key secrets */ -}}
{{- $apiKeyTargetNamespaces := list -}}
{{- if and $apiKeyNamespaces (eq (len $apiKeyNamespaces) 1) (eq (index $apiKeyNamespaces 0) "*") }}
  {{- /* Get all namespaces from cluster */ -}}
  {{- range $index, $ns := (lookup "v1" "Namespace" "" "").items -}}
    {{- /* Skip system namespaces and release namespace */ -}}
    {{- if or (eq $ns.metadata.name "kube-system") (eq $ns.metadata.name "kube-public") (eq $ns.metadata.name "kube-node-lease") (eq $ns.metadata.name $.Release.Namespace) }}
      {{/*Do nothing*/}}
    {{- /* Skip if Values.sensorInject.apiKeySecret.excludeNamespaces contains the namespace */ -}}
    {{- else if (has $ns.metadata.name $.Values.sensorInject.apiKeySecret.excludeNamespaces) }}
      {{/*Do nothing*/}}
    {{- else }}
      {{- $apiKeyTargetNamespaces = append $apiKeyTargetNamespaces $ns.metadata.name -}}
    {{- end -}}
  {{- end -}}
{{- else }}
  {{- /* Use specific namespaces from values */ -}}
  {{- $apiKeyTargetNamespaces = $apiKeyNamespaces -}}
{{- end -}}

{{- /* Create API key secrets in all target namespaces */ -}}
{{- range $namespace := $apiKeyTargetNamespaces }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ $apiKeySecretName }}
  namespace: {{ $namespace }}
  labels:
    {{- include "wiz-admission-controller.labels" $ | nindent 4 }}
  {{- with $.Values.sensorInject.apiKeySecret.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
type: Opaque
data:
  clientId: {{ $clientId }}
  clientToken: {{ $clientToken }}
{{- end }}
{{- end }}

{{- end }}
