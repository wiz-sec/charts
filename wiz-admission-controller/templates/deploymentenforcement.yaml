{{- if eq (include "wiz-admission-controller.isEnforcerEnabled" . | trim | lower) "true" }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "wiz-admission-controller-enforcer.name" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "wiz-admission-controller-enforcement.labels" . | nindent 4 }}
spec:
  {{- if not .Values.hpa.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "wiz-admission-controller.selectorLabels" . | nindent 6 }}
      {{- include "wiz-admission-controller-enforcement.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        rollme.proxyHash: {{ include "wiz-admission-controller.proxyHash" . }}
        rollme.wizApiTokenHash: {{ include "wiz-admission-controller.wizApiTokenHash" . }}
        rollme.webhookCert: {{ include (print $.Template.BasePath "/opawebhook.yaml") . | sha256sum }}
        {{- with .Values.global.podAnnotations }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- with .Values.podAnnotations }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        wiz.io/component: "admission-controller-enforcer"
        {{/*
        `labels` includes `selectorLabels`
        */}}
        {{- include "wiz-admission-controller-enforcement.labels" . | nindent 8 }}
        {{- with .Values.global.podLabels }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- with .Values.podLabels }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
      {{- end }}
      {{- with (coalesce .Values.global.imagePullSecrets .Values.imagePullSecrets) }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "wiz-admission-controller.serviceAccountName" . }}
      securityContext:
        {{- if hasKey .Values.global "lowPrivilegePodSecurityPolicy" }}
        {{- toYaml .Values.global.lowPrivilegePodSecurityPolicy | nindent 8 }}
        {{- else }}
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
        {{- end }}
      {{- if .Values.hostNetwork }}
      hostNetwork: true
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.global.podTerminationGracePeriodSeconds }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- if hasKey .Values.global "lowPrivilegeSecurityPolicy" }}
            {{- toYaml .Values.global.lowPrivilegeSecurityPolicy | nindent 12 }}
            {{- else }}
            {{- toYaml .Values.securityContext | nindent 12 }}
            {{- end }}
          image: {{ include "wiz-admission-controller.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
          - containerPort: {{ .Values.service.targetPort }}
          readinessProbe:
            httpGet:
              path: /ready
              port: {{ .Values.healthPort }}
              scheme: HTTPS
            {{- toYaml .Values.probes.readinessProbe | nindent 12 }}
          livenessProbe:
            httpGet:
              path: /live
              port: {{ .Values.healthPort }}
              scheme: HTTPS
            {{- toYaml .Values.probes.livenessProbe | nindent 12 }}
          startupProbe:
            httpGet:
              path: /ready
              port: {{ .Values.healthPort }}
              scheme: HTTPS
            {{- toYaml .Values.probes.startupProbe | nindent 12 }}

          command:
          - "/usr/bin/wiz-admission-controller"
          {{- include "spec.common.commandArgs" . | trim | nindent 10 }}
          {{- include "spec.admissionControllerRunner.commandArgs" . | trim | nindent 10 }}
          # Webhook flags
          {{- with (coalesce .Values.opaWebhook.errorEnforcementMethod .Values.webhook.errorEnforcementMethod) }} # check opaWebhook for backward compatibility
          - "--error-enforcement-method={{ . }}"
          {{- end }}
          {{- with (coalesce .Values.webhook.policyEnforcementMethod .Values.opaWebhook.policyEnforcementMethod) }} # check opaWebhook for backward compatibility
          - "--policy-enforcement-method={{ . }}"
          {{- end }}
          # OPA webhook flags
          - "--misconfiguration-enabled={{ .Values.opaWebhook.enabled }}"
          {{-  include "wiz-admission-controller.opaCliParams.policies" . | trim | nindent 10 }}
          # Image integrity webhook flags
          {{- if .Values.imageIntegrityWebhook.enabled }}
          - "--image-integrity-enabled=true"
          - "--image-integrity-cache-digest-ttl={{ .Values.imageIntegrityWebhook.cacheImageDigestTTL }}"
          - "--image-integrity-cache-verify-ttl={{ .Values.imageIntegrityWebhook.cacheImageVerifyTTL }}"
          {{- include "wiz-admission-controller.imageIntegrityCliParams.policies" . | trim | nindent 10 }}
          ## Image registry client flags
          - "--registry-image-pull-secret-namespace={{ .Values.imageRegistryClient.secretsNamespace }}"
          {{- include "wiz-admission-controller.imageRegistryClient.pullSecrets" . | trim | nindent 10 }}
          {{- include "wiz-admission-controller.imageRegistryClient.credentialHelpersSecrets" . | trim | nindent 10 }}
          {{- end -}}
          # Disable K8S audit logs webhook
          - "--kubernetes-audit-logs-enabled=false"
          env:
          {{- include "spec.common.envVars" . | trim | nindent 10 }}
          - name: WIZ_IMAGE_INTEGRITY_PATCH_IMAGE_DIGEST_ANNOTATION
            value: {{ .Values.imageIntegrityWebhook.patchImageDigestAnnotation | quote }}
           # For running pod with read only file system we write all the cache files to /var/cache volume mount, used by image integrity hook
          - name: TUF_ROOT
            value: "/var/cache/.sigstore"
          - name: AWS_ECR_CACHE_DIR
            value: "/var/cache/.ecr"
           ## Image registry client flags
          - name: WIZ_REGISTRY_IGNORE_SECRET_MISSING_ERROR
            value: {{ .Values.imageRegistryClient.ignoreMissingSecretError | quote }}
          - name: WIZ_REGISTRY_IMAGE_PULL_SECRET_RELOAD_INTERVAL
            value: {{ .Values.imageRegistryClient.cacheImagePullSecretsInterval | quote }}
          ## Enable debug webhook that only logs the request
          {{- if .Values.debugWebhook.enabled }}
          - name: WIZ_DEBUG_WEBHOOK_ENABLED
            value: "true"
          {{- end }}
          resources:
            {{- include "wiz-admission-controller.resources" . | trim | nindent 12 }}
          volumeMounts:
          - mountPath: /var/cache
            name: cache
          - mountPath: /var/server-certs
            name: server-certs
            readOnly: true
          {{- with .Values.customVolumeMounts }}
            {{- toYaml . | nindent 10 }}
          {{- end }}
          {{- with .Values.global.customVolumeMounts }}
            {{- toYaml . | nindent 10 }}
          {{- end }}
      volumes:
        - name: cache
          emptyDir: {}
        - name: server-certs
          secret:
            defaultMode: 444
            secretName: {{ include "wiz-admission-controller.secretServerCert" . | trim }}
        {{- with .Values.customVolumes }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- with .Values.global.customVolumes }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- with (coalesce .Values.global.nodeSelector .Values.nodeSelector) }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with (coalesce .Values.global.affinity .Values.affinity) }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if (or .Values.global.tolerations .Values.tolerations)}}
      tolerations:
        {{- with .Values.global.tolerations }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- with .Values.tolerations }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- end }}
{{- end }}
