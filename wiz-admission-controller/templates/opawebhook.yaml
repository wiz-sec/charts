{{- $useCertManagerCerts := (or .Values.webhook.injectCaFrom .Values.webhook.createSelfSignedCert) -}}
{{- $tlsCrt := .Values.tlsCertificate.tlsCertificate -}}
{{- $tlsKey := .Values.tlsCertificate.tlsKey -}}
{{- if .Values.tlsCertificate.create -}}
{{- $altNames := list ( printf "%s.%s" (include "wiz-admission-controller-enforcer.name" .) .Release.Namespace ) ( printf "%s.%s.svc" (include "wiz-admission-controller-enforcer.name" .) .Release.Namespace ) ( printf "%s.%s" ( include "wiz-kubernetes-audit-log-collector.name" .) .Release.Namespace ) ( printf "%s.%s.svc" ( include "wiz-kubernetes-audit-log-collector.name" .) .Release.Namespace ) -}}
{{- $ca := genCA "wiz-admission-controller-ca" 3650 -}}
{{- $cert := genSignedCert ( include "wiz-admission-controller.fullname" . ) nil $altNames 3650 $ca -}}
{{- $tlsCrt = $cert.Cert | b64enc -}}
{{- $tlsKey = $cert.Key | b64enc -}}
{{- end -}}
{{ if .Values.opaWebhook.enabled -}}
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: {{ printf "%s-%s" (include "wiz-admission-controller-enforcer.name" . ) "misconfigurations" }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "wiz-admission-controller.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": "post-install, post-upgrade"
    "helm.sh/hook-delete-policy": "before-hook-creation"
  {{- if $useCertManagerCerts }}
    "cert-manager.io/inject-ca-from": {{ include "wiz-admission-controller.certManagerInject" . }}
  {{- end }}
webhooks:
- name: misconfigurationsadmissionvalidator.wiz.io
  admissionReviewVersions: ["v1", "v1beta1"]
  clientConfig:
    service:
      namespace: {{ .Release.Namespace }}
      name: {{ include "wiz-admission-controller-enforcer.name" . }}
      path: /opa-validator
      port: {{ .Values.service.port }}
{{- if not $useCertManagerCerts }}
    caBundle: {{ $tlsCrt }}
{{- end }}
  {{- with .Values.opaWebhook.rules }}
  rules:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with .Values.opaWebhook.namespaceSelector }}
  namespaceSelector:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  timeoutSeconds: {{ .Values.opaWebhook.timeoutSeconds }}
  failurePolicy: Ignore
  sideEffects: {{ .Values.opaWebhook.sideEffects }}
{{- end }}
{{ if .Values.imageIntegrityWebhook.enabled -}}
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: {{ printf "%s-%s" (include "wiz-admission-controller.fullname" . ) "image-integrity" }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "wiz-admission-controller.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": "post-install, post-upgrade"
    "helm.sh/hook-delete-policy": "before-hook-creation"
  {{- if $useCertManagerCerts }}
    "cert-manager.io/inject-ca-from": {{ include "wiz-admission-controller.certManagerInject" . }}
  {{- end }}
webhooks:
- name: imageintegrityadmissionvalidator.wiz.io
  admissionReviewVersions: ["v1", "v1beta1"]
  clientConfig:
    service:
      namespace: {{ .Release.Namespace }}
      name: {{ include "wiz-admission-controller-enforcer.name" . }}
      path: /image-integrity-validator
      port: {{ .Values.service.port }}
{{- if not $useCertManagerCerts }}
    caBundle: {{ $tlsCrt }}
{{- end }}
  {{- with .Values.imageIntegrityWebhook.rules }}
  rules:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with .Values.imageIntegrityWebhook.namespaceSelector }}
  namespaceSelector:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  timeoutSeconds: {{ .Values.imageIntegrityWebhook.timeoutSeconds }}
  failurePolicy: Ignore
  sideEffects: {{ .Values.imageIntegrityWebhook.sideEffects }}
{{- end }}
{{ if .Values.kubernetesAuditLogsWebhook.enabled -}}
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: {{ printf "%s-%s" (include "wiz-admission-controller-enforcer.name" . ) "kubernetes-audit-logs" }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "wiz-admission-controller.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": "post-install, post-upgrade"
    "helm.sh/hook-delete-policy": "before-hook-creation"
  {{- if $useCertManagerCerts }}
    "cert-manager.io/inject-ca-from": {{ include "wiz-admission-controller.certManagerInject" . }}
  {{- end }}
webhooks:
- name: kubernetesauditlogs.wiz.io
  admissionReviewVersions: ["v1", "v1beta1"]
  clientConfig:
    service:
      namespace: {{ .Release.Namespace }}
      name: {{ include "wiz-kubernetes-audit-log-collector.name" . }}
      path: /kubernetes-audit-logs
      port: {{ .Values.service.port }}
{{- if not $useCertManagerCerts }}
    caBundle: {{ $tlsCrt }}
{{- end }}
  {{- with .Values.kubernetesAuditLogsWebhook.rules }}
  rules:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with .Values.kubernetesAuditLogsWebhook.namespaceSelector }}
  namespaceSelector:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  timeoutSeconds: {{ .Values.kubernetesAuditLogsWebhook.timeoutSeconds }}
  failurePolicy: Ignore
  sideEffects: {{ .Values.kubernetesAuditLogsWebhook.sideEffects }}
{{- end }}
{{ if .Values.debugWebhook.enabled -}}
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: {{ printf "%s-%s" (include "wiz-admission-controller.fullname" . ) "debug" }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "wiz-admission-controller.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": "post-install, post-upgrade"
    "helm.sh/hook-delete-policy": "before-hook-creation"
  {{- if $useCertManagerCerts }}
    "cert-manager.io/inject-ca-from": {{ include "wiz-admission-controller.certManagerInject" . }}
  {{- end }}
webhooks:
- name: debug.wiz.io
  admissionReviewVersions: ["v1", "v1beta1"]
  clientConfig:
    service:
      namespace: {{ .Release.Namespace }}
      name: {{ include "wiz-admission-controller-enforcer.name" . }}
      path: /dumper
      port: {{ .Values.service.port }}
{{- if not $useCertManagerCerts }}
    caBundle: {{ $tlsCrt }}
{{- end }}
  {{- with .Values.debugWebhook.rules }}
  rules:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with .Values.debugWebhook.namespaceSelector }}
  namespaceSelector:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  timeoutSeconds: {{ .Values.debugWebhook.timeoutSeconds }}
  failurePolicy: Ignore
  sideEffects: {{ .Values.debugWebhook.sideEffects }}
{{- end }}
{{- $isEnforcer := (eq (include "wiz-admission-controller.isEnforcerEnabled" . | trim | lower) "true") }}
{{- $isAuditLog := .Values.kubernetesAuditLogsWebhook.enabled }}
{{- if and (or $isEnforcer $isAuditLog) (not $useCertManagerCerts) }}
---
apiVersion: v1
kind: Secret
type: kubernetes.io/tls
metadata:
  name: {{ include "wiz-admission-controller.secretServerCert" . | trim }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "wiz-admission-controller.labels" . | nindent 4 }}
  annotations:
    # Using helm hook to create certs only for chart install
    "helm.sh/hook": "pre-install, pre-upgrade"
    "helm.sh/hook-delete-policy": "before-hook-creation"
    {{- with .Values.webhook.secret.annotations }}
      {{- toYaml . | nindent 4 }}
    {{- end }}
    {{- with .Values.opaWebhook.secret.annotations }}
      {{- toYaml . | nindent 4 }}
    {{- end }}
data:
  tls.crt: {{ $tlsCrt }}
  tls.key: {{ $tlsKey }}
{{- end }}

