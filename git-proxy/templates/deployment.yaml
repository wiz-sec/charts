apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "git-proxy.fullname" . }}
  labels:
    {{- include "git-proxy.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "git-proxy.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "git-proxy.selectorLabels" . | nindent 8 }}
        {{- with .Values.labels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- if .Values.serviceAccount.azureWorkloadIdentityClientID }}
        azure.workload.identity/use: "true"
        {{- end }}
    spec:
      {{- if .Values.affinity }}
      affinity:
        {{- toYaml .Values.affinity | nindent 8 }}
      {{- end }}
      {{- if and (eq .Values.storageService "blob") (not .Values.blob.azureCreds) }}
      {{/* since the main container is running in non-root we need to change the azure.json file permissions to allow
      us to read it */}}
      initContainers:
        - name: hostpath-copier
          image: "{{ .Values.hostpathCopier.image.repository }}:{{ .Values.hostpathCopier.image.tag }}"
          imagePullPolicy: "{{ .Values.image.pullPolicy }}"
          command: ["/bin/sh", "-c"]
          args: ["cp /etc/kubernetes/azure.json /target/azure.json; chmod 444 /target/azure.json"]
          volumeMounts:
            - mountPath: /etc/kubernetes/
              readOnly: true
              name: azure-creds-hostpath
            - name: azure-creds
              mountPath: /target
      {{- end }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "git-proxy.serviceAccountName" . }}
      securityContext:
        fsGroup: 1000
        supplementalGroups:
          - 1000
      {{- if eq .Values.storageService "blob" }}
      {{- if .Values.blob.globalStorageAccountIP }}
      hostAliases:
        - ip: "{{.Values.blob.globalStorageAccountIP }}"
          hostnames:
          - "{{.Values.blob.storageAccountName}}.blob.{{.Values.blob.storageAccountDomain}}"
      {{- end}}
      {{- end}}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            privileged: false
            allowPrivilegeEscalation: false
          image: "{{ .Values.image.repository }}/{{ .Values.image.namePrefix}}-{{ required "storageService is required" .Values.storageService }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
          {{- range $key, $value := .Values.extraEnv }}
          - name: {{ $key }}
            value: "{{ $value }}"
          {{- end }}
          {{- if eq .Values.storageService "s3" }}
          - name: AWS_REGION
            value: {{ required "s3.region is required" .Values.s3.region | quote }}
          {{- end }}
          {{- if eq .Values.storageService "oss" }}
          - name: ALICLOUD_OIDC_PROVIDER_ARN
            value: {{ .Values.oss.oidcProviderARN }}
          - name: ALICLOUD_OIDC_TOKEN_FILE_PATH
            value: "/var/run/secrets/tokens/oidc-token"
          - name: ALICLOUD_ROLE_ARN
            value: {{ .Values.oss.roleARN }}
          {{- end }}
          - name: http_proxy
            valueFrom:
              secretKeyRef: 
                name: {{ .Values.httpProxyConfiguration.name | quote }}
                key: "http-proxy"
                optional: true
          - name: HTTP_PROXY
            valueFrom:
              secretKeyRef: 
                name: {{ .Values.httpProxyConfiguration.name | quote }}
                key: "http-proxy"
                optional: true
          - name: https_proxy
            valueFrom:
              secretKeyRef: 
                name: {{ .Values.httpProxyConfiguration.name | quote }}
                key: "https-proxy"
                optional: true
          - name: HTTPS_PROXY
            valueFrom:
              secretKeyRef: 
                name: {{ .Values.httpProxyConfiguration.name | quote }}
                key: "https-proxy"
                optional: true
          - name: no_proxy
            valueFrom:
              secretKeyRef: 
                name: {{ .Values.httpProxyConfiguration.name | quote }}
                key: "no-proxy-address-cs"
                optional: true
          - name: NO_PROXY
            valueFrom:
              secretKeyRef: 
                name: {{ .Values.httpProxyConfiguration.name | quote }}
                key: "no-proxy-address-cs"
                optional: true
          args: [
            {{- if eq .Values.storageService "blob" }}
            "--resourceGroup", {{ required "blob.resourceGroupName is required" .Values.blob.resourceGroupName | quote }},
            "--storageAccount", {{ required "blob.storageAccountName is required" .Values.blob.storageAccountName | quote }},
            "--containerName", {{ required "blob.containerName is required" .Values.blob.containerName | quote }},
            {{- end }}
            {{- if eq .Values.storageService "gcs" }}
            "--bucketName", {{ required "gcs.bucketName is required" .Values.gcs.bucketName | quote }},
            {{- end }}
            {{- if eq .Values.storageService "s3" }}
            "--bucketName", {{ required "s3.bucketName is required" .Values.s3.bucketName | quote }},
            {{- end }}
            {{- if eq .Values.storageService "objectstorage" }}
            "--region", {{ required "objectstorage.region is required" .Values.objectstorage.region | quote }},
            "--namespaceName", {{ required "objectstorage.namespaceName is required" .Values.objectstorage.namespaceName | quote }},
            "--bucketName", {{ required "objectstorage.bucketName is required" .Values.objectstorage.bucketName | quote }},
            {{- end }}
            {{- if eq .Values.storageService "oss" }}
            "--region", {{ required "oss.region is required" .Values.oss.region | quote }},
            "--bucketName", {{ required "oss.bucketName is required" .Values.oss.bucketName | quote }},
            {{- end }}
            "--port", "{{ .Values.service.port }}",
            {{- if and (eq .Values.storageService "s3") .Values.internetAccessCertificates.skipSslValidation }}
            "--skipSslValidation",
            {{- end }}
          ]
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - mountPath: /tmp
              name: tmp-dir
            {{- if eq .Values.storageService "blob" }}
            - mountPath: /etc/kubernetes/
              name: azure-creds
              readOnly: true
            {{- end }}
            {{- if eq .Values.storageService "oss" }}
            - name: oidc-token
              mountPath: /var/run/secrets/tokens
            {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: tmp-dir
          emptyDir: {}
        {{- if eq .Values.storageService "blob" }}
        {{- if .Values.blob.azureCreds }}
        - name: azure-creds
          secret:
            secretName: azure-creds
        {{- else }}
        - name: azure-creds
          emptyDir:
            medium: Memory
        - name: azure-creds-hostpath
          hostPath:
            path: /etc/kubernetes/
            type: Directory
        {{- end }}
        {{- end }}
        {{- if eq .Values.storageService "oss" }}
        - name: oidc-token
          projected:
            sources:
            - serviceAccountToken:
                path: oidc-token
                expirationSeconds: 7200    # The validity period of the OIDC token in seconds.
                audience: "sts.aliyuncs.com"
        {{- end }}
